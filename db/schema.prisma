generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model AccessRole {
  id                  Int                   @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name                String                @db.VarChar(255)
  ResourceAccessRoles ResourceAccessRoles[]
  AccessRolePolicies  AccessRolePolicies[]
}

model ResourceAccessRoles {
  id             Int        @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  access_role_id Int
  resource_id    Int
  credentials    String     @db.VarChar(255)
  resource       Resource   @relation(fields: [resource_id], references: [id])
  access_role    AccessRole @relation(fields: [access_role_id], references: [id])
}

model AccessRolePolicies {
  id             Int        @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  access_role_id Int
  policy_id      Int
  access_role    AccessRole @relation(fields: [access_role_id], references: [id])
  policy         Policy     @relation(fields: [policy_id], references: [id])
}

model Action {
  id            Int             @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name          String          @db.VarChar(255)
  provider_id   Int
  provider      Provider        @relation(fields: [provider_id], references: [id])
  PolicyActions PolicyActions[]
}

model Policy {
  id                  Int                  @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name                String               @db.VarChar(255)
  provider_account_id Int
  provider_account    ProviderAccount      @relation(fields: [provider_account_id], references: [id])
  AccessRolePolicies  AccessRolePolicies[]
  PolicyActions       PolicyActions[]
  PolicyResources     PolicyResources[]
}

model PolicyActions {
  id        Int    @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  policy_id Int
  action_id Int
  policy    Policy @relation(fields: [policy_id], references: [id])
  action    Action @relation(fields: [action_id], references: [id])
}

model PolicyResources {
  id          Int      @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  policy_id   Int
  resource_id Int
  policy      Policy   @relation(fields: [policy_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model Provider {
  id              Int               @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name            String            @db.VarChar(255)
  category        String            @db.VarChar(255)
  Action          Action[]
  ProviderAccount ProviderAccount[]
}

model ProviderAccount {
  id          Int        @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name        String     @db.VarChar(255)
  provider_id Int
  credentials String     @db.VarChar(255)
  provider    Provider   @relation(fields: [provider_id], references: [id])
  Policy      Policy[]
  Resource    Resource[]
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
}

model Resource {
  id                  Int                   @id @unique(map: "id") @default(autoincrement()) @db.UnsignedInt
  name                String                @db.VarChar(255)
  provider_account_id Int
  provider_account    ProviderAccount       @relation(fields: [provider_account_id], references: [id])
  ResourceAccessRole  ResourceAccessRoles[]
  PolicyResources     PolicyResources[]
}

model User {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String?
  email           String            @unique
  hashedPassword  String?
  role            String            @default("user")
  sessions        Session[]
  tokens          Token[]
  ProviderAccount ProviderAccount[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  expiresAt   DateTime
  sentTo      String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([hashedToken, type])
}
